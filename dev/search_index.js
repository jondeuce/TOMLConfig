var documenterSearchIndex = {"docs":
[{"location":"#TOMLConfig.jl","page":"Home","title":"TOMLConfig.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"TOMLConfig\nArgParse.parse_args\nArgParse.add_arg_table!\nTOMLConfig.parser_settings!\nTOMLConfig.Config\nTOMLConfig.defaults!\nTOMLConfig.arg_table_flag","category":"page"},{"location":"#TOMLConfig","page":"Home","title":"TOMLConfig","text":"TOMLConfig\n\nUse TOML files to configure command line parsing via ArgParse.jl.\n\n\n\n\n\n","category":"module"},{"location":"#ArgParse.parse_args","page":"Home","title":"ArgParse.parse_args","text":"ArgParse.parse_args(\n    [args_list::Vector, [settings::ArgParseSettings,]] cfg::Config;\n    as_dict = false,\n    as_symbols = false,\n    kwargs...\n)\n\nParse TOML configuration struct with command line arguments args_list.\n\nArguments:\n\nargs_list::Vector: vector of arguments to be parsed\nsettings::ArgParseSettings: settings struct which will be configured according to cfg\ncfg::Config: TOML configuration settings\n\nKeywords:\n\nas_dict: if true, return config as a dictionary with String keys, otherwise return a Config struct\nas_symbols: if true and as_dict=true, return config dictionary with Symbol keys\nkwargs...: additional keyword arguments can be passed to customize the global parser settings; see TOMLConfig.parser_settings!. Note that these settings remain persistent on subsequent calls to parse_args; use TOMLConfig.parser_settings!() to restore all defaults.\n\nExamples\n\njulia> using TOMLConfig\n\njulia> cfg = Config(TOML.parse(\n       \"\"\"\n       a = 1\n       b = 2\n       \n       [sec1]\n       b = \"_PARENT_\"\n       c = 3\n       \n           [sec1.sub1]\n           _INHERIT_ = \"_PARENT_\"\n       \"\"\"));\n\njulia> parsed_args = parse_args([\"--a\", \"3\", \"--sec1.b\", \"5\", \"--sec1.c\", \"10\"], cfg)\nTOML Config with contents:\n\nb = 2\na = 3\n\n[sec1]\nc = 10\nb = 5\n\n    [sec1.sub1]\n    c = 10\n    b = 5\n\n\n\n\n\n","category":"function"},{"location":"#ArgParse.add_arg_table!","page":"Home","title":"ArgParse.add_arg_table!","text":"ArgParse.add_arg_table!(settings::ArgParseSettings, cfg::Config)\n\nPopulate settings argument table using configuration cfg.\n\nExamples\n\njulia> using TOMLConfig\n\njulia> cfg = Config(TOML.parse(\n       \"\"\"\n       a = 1.0\n       b = 2\n       \n       [sec1]\n       c = [3, 4]\n       \n           [sec1.sub1]\n           d = \"d\"\n       \"\"\"));\n\njulia> settings = add_arg_table!(ArgParseSettings(prog = \"myscript.jl\"), cfg);\n\njulia> ArgParse.show_help(settings; exit_when_done = false)\nusage: myscript.jl [--b B] [--a A] [--sec1.c [SEC1.C...]]\n                   [--sec1.sub1.d SEC1.SUB1.D]\n\noptional arguments:\n  --b B                 (type: Int64, default: 2)\n  --a A                 (type: Float64, default: 1.0)\n  --sec1.c [SEC1.C...]  (type: Int64, default: [3, 4])\n  --sec1.sub1.d SEC1.SUB1.D\n                        (default: \"d\")\n\n\n\n\n\n","category":"function"},{"location":"#TOMLConfig.parser_settings!","page":"Home","title":"TOMLConfig.parser_settings!","text":"parser_settings!(;\n    arg_key = \"_ARG_\",\n    arg_required_value = \"_REQUIRED_\",\n    flag_delim = \".\",\n    inherit_all_key = \"_INHERIT_\",\n    inherit_parent_value = \"_PARENT_\",\n)\n\nCustomize global settings for parsing Config structs. To restore default settings, use TOMLConfig.parser_settings!().\n\nKeywords:\n\narg_key: if this key is found in a TOML section, the rest of the section is interpreted as properties for the argument table entry\narg_required_value: if this value is found in a TOML section, the required = true is passed to the argument table entry\ninherit_all_key: if this key is found in a TOML section, all fields from the immediate parent section (i.e., non-recursive) should be inherited\ninherit_parent_value: if this value is found in a TOML section, it is replaced with the value corresponding to the same key in the immediate parent section (i.e., non-recursive)\nflag_delim: command line flags for keys in nested TOML sections are formed by joining all parent keys together with this delimiter\n\n\n\n\n\n","category":"function"},{"location":"#TOMLConfig.Config","page":"Home","title":"TOMLConfig.Config","text":"Config(toml::AbstractDict{String})\nConfig(; filename::String)\n\nBasic tree structure for navigating TOML file contents. Each node in the Config tree represents a single section of a TOML file. Children of a Config node are the corresponding TOML subsections, if they exist.\n\nExamples\n\njulia> using TOMLConfig\n\njulia> cfg = Config(TOML.parse(\n       \"\"\"\n       a = 1\n       \n       [sec1]\n           b = 2\n       \n           [sec1.sub1]\n           c = 3\n       \"\"\"))\nTOML Config with contents:\n\na = 1\n\n[sec1]\nb = 2\n\n    [sec1.sub1]\n    c = 3\n\njulia> cfg.sec1\nTOML Config with contents:\n\nb = 2\n\n[sub1]\nc = 3\n\njulia> cfg.sec1.sub1\nTOML Config with contents:\n\nc = 3\n\n\n\n\n\n","category":"type"},{"location":"#TOMLConfig.defaults!","page":"Home","title":"TOMLConfig.defaults!","text":"defaults!(cfg::Config)\n\nPopulate fields of TOML config which are specified to have default values inherited from parent sections.\n\nExamples\n\njulia> using TOMLConfig\n\njulia> cfg = TOMLConfig.defaults!(Config(TOML.parse(\n       \"\"\"\n       a = 1\n       b = 2\n       \n       [sec1]\n       b = \"_PARENT_\"\n       c = 3\n       \n           [sec1.sub1]\n           _INHERIT_ = \"_PARENT_\"\n       \"\"\")))\nTOML Config with contents:\n\nb = 2\na = 1\n\n[sec1]\nc = 3\nb = 2\n\n    [sec1.sub1]\n    c = 3\n    b = 2\n\n\n\n\n\n","category":"function"},{"location":"#TOMLConfig.arg_table_flag","page":"Home","title":"TOMLConfig.arg_table_flag","text":"arg_table_flag(node::Config, k::String)\n\nGenerate command flag corresponding to nested key k in a Config node. The flag is constructed by joining the keys recursively from the parents of the current node using the delimiter flag_delim() and prepending \"â€“\".\n\nExamples\n\nGiven a Config node with contents\n\na = 1\nb = 2\n\n[sec1]\nc = 3\n\n    [sec1.sub1]\n    d = 4\n\nThe corresponding flags that will be generated are\n\n--a\n--b\n--sec1.c\n--sec1.sub1.d\n\n\n\n\n\n","category":"function"}]
}
